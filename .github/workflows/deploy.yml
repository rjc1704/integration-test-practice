name: Test andDeploy To EC2

on:
  push:
    branches:
      - main

jobs:
  Test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 깃헙 레포지토리 불러오기
        uses: actions/checkout@v4

      - name: Node 설치
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: 의존성 설치
        run: npm ci

      - name: Prisma 클라이언트 생성
        run: npx prisma generate

      - name: Prisma 마이그레이션 실행
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        run: npx prisma migrate deploy

      - name: 테스트 코드 실행
        run: npm run test

  Deploy:
    runs-on: ubuntu-latest # 깃헙액션 워크플로우가 실행되는 OS 환경. EC2 OS와 같은 필요 없음
    needs: Test
    steps:
      - name: 깃헙 레포지토리 불러오기
        uses: actions/checkout@v4

      - name: Node 설치
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: 의존성 설치
        run: npm ci

      - name: .env 파일 생성
        run: |
          echo "${{ secrets.ENV }}" > .env

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        env:
          ENV: ${{ secrets.ENV }}
        with:
          host: ${{ secrets.EC2_HOST }} # EC2의 주소
          username: ${{ secrets.EC2_USERNAME }} # EC2 접속 username
          key: ${{ secrets.EC2_PRIVATE_KEY }} # EC2의 Key 파일의 내부 텍스트
          envs: ENV
          script_stop: true # 아래 script 중 실패하는 명령이 하나라도 있으면 실패로 처리
          script: |
            cd /home/ec2-user/integration-test-practice
            rm -rf .env
            git pull origin main
            echo "$ENV" > .env
            npm ci
            npm run build
            pm2 kill
            pm2 start dist/app.js --name "express-server"
